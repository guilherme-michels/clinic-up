generator client {
  provider = "prisma-client-js"
  // seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../src/schemas"
  createInputTypes                 = false
  createModelTypes                 = true
  addInputTypeValidation           = false
  createOptionalDefaultValuesTypes = false
  tsConfigFilePath                 = "tsconfig.json"
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  passwordHash String?  @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tokens               Token[]
  accounts             Account[]
  invites              Invite[]
  member_on            Member[]
  owns_organizations   Organization[]
  appointments         Appointment[]
  created_appointments Appointment[]  @relation("CreatedAppointments")
  notifications        Notification[]
  sent_messages        Message[]      @relation("SentMessages")
  received_messages    Message[]      @relation("ReceivedMessages")

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GMAIL
  GITHUB
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum Role {
  ADMIN
  MEMBER
  BILLING
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id        String  @id @default(uuid())
  role      Role    @default(MEMBER)
  specialty String?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  appointments Appointment[]
  Treatment    Treatment[]
  Prescription Prescription[]

  @@unique([organizationId, userId])
  @@map("members")
}

model Patient {
  id               String   @id @default(uuid())
  name             String
  email            String?  @unique
  phone            String?
  birthDate        DateTime @map("birth_date")
  avatarUrl        String?  @map("avatar_url")
  gender           Gender?
  cpf              String?  @unique
  rg               String?
  healthPlan       String?
  profession       String?
  responsibleName  String?  @map("responsible_name")
  responsiblePhone String?  @map("responsible_phone")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  cep          String?
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  medicalRecord MedicalRecord?
  appointments  Appointment[]

  FinancialTransaction FinancialTransaction[]
  CustomerSatisfaction CustomerSatisfaction[]
  PatientAnamnesis     PatientAnamnesis[]
  Treatment            Treatment[]
  Prescription         Prescription[]

  @@map("patients")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model MedicalRecord {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String  @unique @map("patient_id")

  anamneses Anamnesis[]

  @@map("medical_records")
}

model Anamnesis {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId String        @map("medical_record_id")

  template   AnamnesisTemplate @relation(fields: [templateId], references: [id])
  templateId String            @map("template_id")

  answers AnamnesisAnswer[]

  @@map("anamneses")
}

model AnamnesisTemplate {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  isActive    Boolean  @default(true)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  questions        AnamnesisQuestion[]
  patientAnamneses PatientAnamnesis[]
  Anamnesis        Anamnesis[]

  @@map("anamnesis_templates")
}

model AnamnesisQuestion {
  id         String       @id @default(uuid())
  question   String
  type       QuestionType
  isRequired Boolean      @default(false)
  order      Int

  template   AnamnesisTemplate @relation(fields: [templateId], references: [id])
  templateId String            @map("template_id")

  answers AnamnesisAnswer[]

  @@map("anamnesis_questions")
}

model PatientAnamnesis {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String  @map("patient_id")

  template   AnamnesisTemplate @relation(fields: [templateId], references: [id])
  templateId String            @map("template_id")

  answers AnamnesisAnswer[]

  @@map("patient_anamneses")
}

model AnamnesisAnswer {
  id     String @id @default(uuid())
  answer String

  question   AnamnesisQuestion @relation(fields: [questionId], references: [id])
  questionId String            @map("question_id")

  patientAnamnesis   PatientAnamnesis @relation(fields: [patientAnamnesisId], references: [id])
  patientAnamnesisId String           @map("patient_anamnesis_id")
  Anamnesis          Anamnesis?       @relation(fields: [anamnesisId], references: [id])
  anamnesisId        String?

  @@map("anamnesis_answers")
}

enum QuestionType {
  TEXT
  BOOLEAN
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  NUMBER
  DATE
}

enum AppointmentType {
  CONSULTATION
  COMMITMENT
}

model Appointment {
  id          String            @id @default(uuid())
  type        AppointmentType
  description String?
  status      AppointmentStatus @default(SCHEDULED)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  consultationDate      DateTime? @map("consultation_date")
  consultationStartTime DateTime? @map("consultation_start_time")
  consultationEndTime   DateTime? @map("consultation_end_time")

  commitmentStartDate DateTime? @map("commitment_start_date")
  commitmentEndDate   DateTime? @map("commitment_end_date")

  patient   Patient? @relation(fields: [patientId], references: [id])
  patientId String?  @map("patient_id")

  member   Member @relation(fields: [memberId], references: [id])
  memberId String @map("member_id")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  createdBy   User    @relation("CreatedAppointments", fields: [createdById], references: [id])
  createdById String  @map("created_by_id")
  User        User?   @relation(fields: [userId], references: [id])
  userId      String?

  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Organization {
  id                        String   @id @default(uuid())
  name                      String
  slug                      String   @unique
  domain                    String?  @unique
  shouldAttachUsersByDomain Boolean  @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String?  @map("avatar_url")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  cnpj        String? @unique
  email       String?
  phone       String?
  website     String?
  description String?

  address           String?
  addressNumber     String?
  addressComplement String?
  neighborhood      String?
  city              String?
  state             String?
  zipCode           String?

  businessHours      Json?
  specialties        String[]
  acceptedInsurances String[]

  facebookUrl  String?
  instagramUrl String?
  linkedinUrl  String?
  twitterUrl   String?

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("user_id")

  invites  Invite[]
  members  Member[]
  patients Patient[]

  financialTransactions FinancialTransaction[]

  customerSatisfactions CustomerSatisfaction[]
  AnamnesisTemplate     AnamnesisTemplate[]
  appointments          Appointment[]
  TransactionCategory   TransactionCategory[]

  @@map("organizations")
}

model FinancialTransaction {
  id            String            @id @default(uuid())
  description   String
  amount        String
  type          TransactionType
  paymentMethod PaymentMethod
  date          DateTime
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  status        TransactionStatus @default(PENDING)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  patient   Patient? @relation(fields: [patientId], references: [id])
  patientId String?  @map("patient_id")

  category   TransactionCategory @relation(fields: [categoryId], references: [id])
  categoryId String              @map("category_id")

  @@map("financial_transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PIX
  OTHER
}

model TransactionCategory {
  id             String                 @id @default(uuid())
  name           String
  organizationId String
  organization   Organization           @relation(fields: [organizationId], references: [id])
  transactions   FinancialTransaction[]

  @@map("transaction_categories")
}

model CustomerSatisfaction {
  id                   String   @id @default(uuid())
  rating               Int      @db.SmallInt
  comment              String?
  createdAt            DateTime @default(now()) @map("created_at")
  serviceQuality       Int      @db.SmallInt
  staffProfessionalism Int      @db.SmallInt
  cleanliness          Int      @db.SmallInt
  overallExperience    Int      @db.SmallInt

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String  @map("patient_id")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  @@map("customer_satisfaction")
}

model Treatment {
  id          String          @id @default(uuid())
  description String
  startDate   DateTime
  endDate     DateTime?
  status      TreatmentStatus

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String  @map("patient_id")

  member   Member @relation(fields: [memberId], references: [id])
  memberId String @map("member_id")

  @@map("treatments")
}

enum TreatmentStatus {
  ONGOING
  COMPLETED
  CANCELLED
}

model Prescription {
  id        String   @id @default(uuid())
  details   String
  createdAt DateTime @default(now())

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String  @map("patient_id")

  member   Member @relation(fields: [memberId], references: [id])
  memberId String @map("member_id")

  @@map("prescriptions")
}

model Notification {
  id        String           @id @default(uuid())
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("notifications")
}

enum NotificationType {
  APPOINTMENT_REMINDER
  NEW_MESSAGE
  SYSTEM_UPDATE
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  sender   User   @relation("SentMessages", fields: [senderId], references: [id])
  senderId String @map("sender_id")

  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String @map("receiver_id")

  @@map("messages")
}
